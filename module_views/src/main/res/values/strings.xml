<resources>
    <string name="app_name">module_views</string>

    <string name="main_fragment">首页</string>

    <string name="view_main_fragment">自定义view</string>
    <string name="slide_delete_fragment">左滑删除列表</string>
    <string name="left_delete_fragment">左滑删除控件</string>
    <string name="header_footer_fragment">带header和footer的Layout</string>
    <string name="scroll_select_fragment">滚动选择的控件</string>
    <string name="layer_slide_fragment">安卓侧滑栏</string>

    <string name="scrolling_collapse_fragment">滚动折叠控件</string>
    <string name="desktop_layer_fragment">滑动切换控件</string>
    <string name="hexagon_rank_fragment">六边形评分控件</string>
    <string name="pie_chart_fragment">多点触控扇形图</string>
    <string name="red_dom_fragment">贝塞尔曲线绘制小红点</string>

    <string name="pattern_lock_fragment">滑动解锁九宫格控件</string>
    <string name="particle_lines_fragment">粒子线条控件</string>

    <string name="game_main_fragment">自定义game</string>
    <string name="airplane_fight_fragment">飞机大战</string>
    <string name="snark_game_fragment">飞机大战</string>
    <string name="bomb_ball_game_fragment">飞机大战</string>
    <string name="tetris_game_fragment">俄罗斯方块</string>

    <string name="widget_main_fragment">自定义widget</string>
    <string name="drawable_view_fragment">手写签名</string>
    <string name="draw_clear">清除</string>
    <string name="draw_back">后退</string>
    <string name="draw_forward">前进</string>
    <string name="draw_output">导出</string>
    <string name="draw_set">设置</string>
    <string name="draw_output_hint">导出路径:</string>
    <string name="draw_width">画笔粗细</string>
    <string name="draw_stroke_color">画笔颜色</string>
    <string name="draw_canvas_color">背景颜色</string>

    <string name="lazy_image_view_fragment">懒加载图片</string>
    <string name="show_bing_pic">点击获取必应每日一图</string>
    <string name="clear_pic">清除</string>

    <string name="test_string">一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n</string>
    <string name="test_long_string">
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n

        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n

        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
    </string>

    <string name="tool_main_fragment">自定义工具</string>
    <string name="custom_glide_fragment">Glide扩展图片类型</string>
</resources>