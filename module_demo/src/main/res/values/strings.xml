<resources>
    <string name="app_name">module_demo</string>

    <string name="plan_get_all">查询全部</string>
    <string name="plan_query">查询</string>
    <string name="plan_delete">删除</string>
    <string name="plan_add">增加</string>
    <string name="plan_update">更新</string>
    <string name="plan_input_id">输入id</string>
    <string name="plan_input_title">输入标题</string>
    <string name="plan_input_content">输入内容</string>
    <string name="plan_all">全部</string>

    <string name="test_string">一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
                一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n
        一般情况下，getMeasuredWidth()和getWidth()获得的结果是一样的，但是如果在父布局的onLayout()方法或者此View的onDraw()方法里调用measure(0,0);(measure中的参数的值你自己可以定义)的话，两者的结果可能会不同。\n</string>
</resources>